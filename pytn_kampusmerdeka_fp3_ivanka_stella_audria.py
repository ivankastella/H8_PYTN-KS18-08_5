# -*- coding: utf-8 -*-
"""PYTN_KampusMerdeka_fp3_Ivanka Stella Audria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14tUO8CJ_Hrocbv5e-n3v5kzjuT193Jpm

# FINAL PROJECT 3

Nama Anggota Kelompok :
- MUHAMAD ADITYA DARMAWAN (PYTN-KS18-01)
- AUDITA BELLA INTAN PUSPITA (PYTN-KS18-05)
- IVANKA STELLA AUDRIA (PYTN-KS18-08)

# Pendahuluan

## Latar Belakang

Penyakit kardiovaskular (CVD) merupakan salah satu penyebab kematian nomor 1 secara global, dimana mengambil sekitar 17,9 juta jiwa setiap tahun, serta menyumbang 31% dari semua kematian di seluruh dunia. Gagal jantung yaitu kejadian umum yang disebabkan oleh CVD. Pada kumpulan dataset ini berisi 12 feature yang dapat digunakan untuk memprediksi kematian akibat gagal jantung.

Sebagian besar penyakit kardiovaskular (CVD) dapat dicegah dengan mengatasi atau mengurangi faktor risiko perilaku diantaranya penggunaan tembakau, diet tidak sehat dan obesitas, kurangnya aktivitas fisik, dan penggunaan alkohol yang berbahaya menggunakan strategi di seluruh populasi.

Orang dengan penyakit kardiovaskular (CVD) atau yang berada pada risiko kardiovaskular tinggi (karena adanya satu atau lebih faktor risiko seperti hipertensi, diabetes, hiperlipidemia atau penyakit yang sudah ada) memerlukan deteksi dan manajemen dini di mana model machine learning dapat sangat membantu.

## Dataset

Dataset yang digunakan pada analisis ini yaitu heart failure clinical records yang diunduh dari kaggle melalui [link berikut](https://www.kaggle.com/datasets/andrewmvd/heart-failure-clinical-data)

Dataset ini berisikan faktor-faktor kematian oleh gagal jantung yang memiliki 13 atribut dengan 299 rows. Atribut yang menjadi target yaitu atribut Death Event/Kematian, sedangkan atribut lainnya merupakan prediktor.

## Objektif

Final Project 3 ini dibuat guna mengevaluasi konsep Ensemble sebagai berikut:
*   Mampu memahami konsep Classification dengan Ensemble Model
*   Mampu mempersiapkan data untuk digunakan dalam Ensemble Model
*   Mampu mengimplementasikan Ensemble Model untuk membuat prediksi

# Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_regression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

from sklearn import metrics
from sklearn.metrics import accuracy_score,f1_score, precision_score, recall_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

import pickle

"""# Data Loading"""

# Load dataset heart_failure_clinical_records_dataset.csv sebagai dataframe

df = pd.read_csv("heart_failure_clinical_records_dataset.csv")

# Menampilkan value data teratas dari dataframe

df.head()

# Menampilkan value data terbawah dari dataframe

df.tail()

# Melihat Jumlah Baris dan Kolom

df.shape

"""### Type of Data"""

# Menampilkan informasi dari value column dataframe

df.info()

# Melihat rincian nama kolom pada dataset

df.columns

# Mengecek apakah pada dataset terdapat missing value

df.isnull().values.any()

"""Output menunjukkan 'False' berarti tidak terdapat missing value"""

# Melihat statistik deskriptif dari masing-masing atribut

df.describe()

"""Diketahui bahwa :
- Usia rata-rata pasien berkisar 60 tahun
- Rata-rata nilai kreatinin fosfokinase pada pasien yaitu 581,84
- Fraksi ejeksi maksimal yang ada pada pasien yaitu 80
- Kreatinin serum minimal yang ada pada pasien yaitu 0,5
- Sodium serum rata-rata pada pasien yaitu 136,63
"""

df.astype('category').describe()

"""Diketahui bahwa:
- Pasien yang tidak mengidap anemia sebanyak 170 pasien
- Pasien yang tidak mengidap diabetes sebanyak 174 pasien
- Pasien dengan tidak mengidap tekanan darah tinggi sebanyak 194 pasien
- Pasien yang tidak merokok sebanyak 203 pasien
- Pasien yang tidak meninggal sebanyak 203 orang
"""

# Melihat banyaknya unique values pada setiap atribut

for col in df.columns:
    print(col,':', df[col].nunique())

# Melihat unique values pada kolom ejection_fraction

df['ejection_fraction'].unique()

"""# Data Cleaning"""

# Melihat apakah terdapat duplikasi data pada dataset

df.duplicated().sum()

"""0 berarti tidak ada duplikasi data pada dataset"""

# Melihat apakah terdapat missing values / nilai yang hilang pada tiap kolom

df.isnull().sum()

"""Pada output diketahui tidak terdapat missing value pada beberapa kolom dalam dataset"""

# Memberikan nama baru pada untuk setiap kolom atau atribut

df = df.rename(columns={'age':'Usia',
                        'anaemia':'Anaemia',
                        'creatinine_phosphokinase':'EnzimCPK',
                        'diabetes':'Diabetes',
                        'ejection_fraction':'PecahanEjeksi',
                        'high_blood_pressure':'TekananDarahTinggi',
                        'platelets':'Trombosit',
                        'serum_creatinine':'KreatininSerum',
                        'serum_sodium':'SodiumSerum',
                        'sex':'JenisKelamin',
                        'smoking':'Merokok',
                        'time':'Waktu',
                        'DEATH_EVENT':'Kematian'})

df.head()

df.columns

# Melihat banyaknya nilai dari masing-masing atribut

for col in df.columns:
    print(col, ': ')
    print(df[col].value_counts())
    print('\n','#'*60,'\n')

"""# Explorasi Data"""

# Melihat jumlah terbanyak umur pasien mengidap penyakit jantung yang banyak merokok

df.loc[df['Merokok'] == 1, 'Usia'].mode()

"""Dari output diketahui bahwa pasien penyakit jantung yang merokok kebanyakan berusia 60 tahun"""

# Melihat jumlah Trombosit pasien penyakit jantung terbanyak dan terkecil

df['Trombosit'].agg(('min', 'max'))

"""Dari output diketahui trombosit terkecil pasien yaitu 25100.0, dan trombosit terbanyak pasien yaitu 850000.0"""

# Melihat proporsi data pada kolom Usia dan Kematian dengan menggunakan crosstab

pd.crosstab(df.Kematian, df.Usia)

"""Pada output diketahui banyak pasien berusia 60 tahun mengalami kematian ketika dilakukan follow up"""

# Melakukan grouping pada atribut Usia dan Kematian untuk melihat rata-ratanya

df[['Usia','Kematian']].groupby('Kematian').mean().sort_values(by='Usia', ascending=True)

"""
Didapati bahwa usia rata-rata pasien yang meninggal adalah 65 tahun, sementara pasien yang tidak meninggal atau bertahan memiliki usia rata-rata sekitar 58 tahun."""

# Melihat data histori record dengan melakukan query, di mana:

df[
    (df['Usia'] == 50.0) &
    (df['Merokok'] == 1) &
    (df['Diabetes'] == 1)
].head()

"""Melihat data histori record dengan melakukan query, di mana:
1. Pasien berusia 50 tahun
2. Pasien Perokok
3. Pasien dengan riwayat Diabetes
"""

# Visualisasi Line Plot Hubungan antara Usia dengan Waktu

sns.lineplot(x='Usia', y='Waktu', data=df)
plt.show()

"""
Dapat disimpulkan bahwa tidak terdapat korelasi yang sebanding atau pola khusus antara usia dan waktu."""

# Melihat persebaran data pada atribut TekananDarahTinggi

df['TekananDarahTinggi'].value_counts().plot.bar(color='red')
plt.title('Persebaran Pasien Penyakit Jantung dengan Tekanan Darah Tinggi')
plt.show()

"""
Hanya terdapat sedikit lebih dari 100 orang pasien Penyakit Jantung dengan Tekanan Darah Tinggi, sementara jumlah mereka yang tidak memiliki Penyakit Jantung dengan Tekanan Darah Tinggi lebih banyak."""

# Mengamati distribusi jumlah kematian pasien berdasarkan usia dan jenis kelamin.

plt.figure(figsize=(20,10))
ax = sns.countplot(x="Usia", hue="Kematian", data=df)

"""Terlihat bahwa distribusi kematian paling tinggi terjadi pada usia 60 tahun, sementara distribusi kematian yang hampir setara terjadi pada usia 54 tahun, 57 tahun, 66 tahun, dan 77 tahun."""

# Visualisasi pie chart 10 Usia pasien terbawah dengan rata- rata riwayat SodiumSerum rendah

df_last10 = df.tail(10)
df_area = df_last10.groupby(['Usia']).sum()['SodiumSerum'].sort_values(ascending=False)
df_area.plot(kind='pie', figsize=(22,8), autopct='%1.0f%%')

plt.title("Pie Chart 10 Usia pasien terbawah dengan rata- rata riwayat SodiumSerum rendah")
plt.show()

"""Dari hasil visualisasi, dapat disimpulkan bahwa usia 63, 50, 60, 55, 52, 62, dan 90 tahun memiliki rerata tingkat rendah SodiumSerum sebesar 10%, diikuti oleh usia 45 tahun dengan rerata tingkat SodiumSerum sebesar 30%."""

# Visualisasi boxplot perbandingan Tekanan Darah Tinggi berdasarkan Pecahan Ejeksi

fig, ax = plt.subplots(figsize=(9, 5))

sns.boxplot(x='TekananDarahTinggi', y='PecahanEjeksi', data=df, palette="pastel")

plt.xlabel("Tekanan Darah Tinggi", fontsize= 12)
plt.ylabel("Pecahan Ejeksi", fontsize= 12)
plt.title("Tekanan Darah Tinggi vs Pecahan Ejeksi", fontsize= 15)

"""Dalam diagram Boxplot, terlihat bahwa kelompok yang tidak memiliki riwayat tekanan darah tinggi (0) memiliki jangkauan yang lebih besar dibandingkan dengan kelompok yang memiliki riwayat tekanan darah tinggi (1). Selain itu, kelompok 0 juga memiliki lebih banyak outlier dibandingkan dengan kelompok 1."""

# Visualisasi korelasi antar variabel untuk melihat hubungan

plt.figure(figsize=(16, 9))
sns.heatmap(df.corr(), annot=True)
plt.show()

"""Dari heatmap yang telah diperlihatkan, dapat disimpulkan bahwa:
- Terdapat korelasi tinggi sebesar 0.45 antara variabel `Merokok` dan `JenisKelamin`.
- Variabel `Waktu` memiliki korelasi rendah sebesar -0.53 dengan variabel `Kematian`.
- Variabel `KreatininSerum` menunjukkan korelasi tinggi sebesar 0.29 dengan variabel `Kematian`.
- Terdapat korelasi tinggi sebesar 0.25 antara variabel `Usia` dan `Kematian`.

# Data Preprocessing
"""

# Melakukan inisialisasi variabel X dan y

X = df.drop(['Kematian'], axis=1)
y = df['Kematian']

print(X.shape)
print(y.shape)

"""
Pada tahap inisialisasi ini, kami mendefinisikan variabel X dengan merujuk pada kolom-kolom selain dari Kematian, sementara variabel y diatur sebagai kolom Kematian."""

# Melakukan feature selection menggunakan library F regression dengan k=12

topFeatures = SelectKBest(f_regression, k=12)
fit = topFeatures.fit(X, y)
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(X.columns)

featureScores = pd.concat([dfcolumns, dfscores],axis=1)
featureScores.columns = ['Features', 'Score']

print("Top 12 Features yang Berpengaruh")
print(featureScores.nlargest(12, 'Score'))

"""Dengan menerapkan analisis F-regression menggunakan library, juga teridentifikasi bahwa 12 fitur yang memiliki pengaruh paling signifikan dalam model, yaitu `Waktu`, `KreatininSerum`, `PecahanEjeksi`, `Usia`, `SodiumSerum`, `TekananDarahTinggi`, `Anaemia`, `EnzimCPK`, `Trombosit`, `Merokok`, `JenisKelamin`, dan `Diabetes`."""

# Menyimpan hasil seleksi fitur ke dalam variabel X_fit untuk digunakan dalam langkah pemodelan berikutnya.

X_fit = df[['Waktu', 'KreatininSerum', 'PecahanEjeksi', 'Usia', 'SodiumSerum', 'TekananDarahTinggi', 'Anaemia', 'EnzimCPK',
            'Trombosit', 'Merokok', 'JenisKelamin', 'Diabetes']]

# Menampilkan 5 baris pertama dataframe X_fit

X_fit.head()

# Menampilkan informasi (kolom, baris, tipe data) dan dimensi pada dataframe X_fit

X_fit.info()
X_fit.shape

# Menyusun data menjadi bagian Pelatihan dan Pengujian pada kolom atau atribut yang telah dikumpulkan. Proporsi data Pelatihan ditetapkan sebesar 80% (0.80), sedangkan data Pengujian sebesar 20% (0.20).

X_train, X_test, y_train, y_test = train_test_split(X_fit, y, test_size=0.20, random_state=13)

print(X_train.shape)
print(X_test.shape)

"""Dengan memperhatikan pembagian proporsi data latih dan data uji, ditemukan bahwa jumlah data latih dari keseluruhan dataset adalah 239, sementara jumlah data uji adalah 60.

# Pendefinisian Model

Untuk mendefinisikan model sampai kompilasi, bagian ini berisi cell untuk memberikan penjelasan, seperti mengapa memilih arsitektur atau jenis model tertentu, mengapa memilih nilai hyperparameter, dan topik lainnya.

Dalam hal ini, kami menggunakan model Random Forest Regressor dan Classifier, yang merupakan metode kelompok untuk menciptakan pohon keputusan yang dibuat pada dataset yang dipisahkan secara acak. Metode ini didasarkan pada pendekatan divide-and-conquer. Karena tipe data prediksi yang digunakan adalah data kategorik, metode ini dianggap cocok untuk digunakan.
"""

# Model klasifikasi hutan random yang menggunakan GAUSSIAN CLASSIFIER n estimator 100

clf = RandomForestClassifier(n_estimators=100)

"""n_estimators adalah sebutan untuk jumlah pohon dalam hutan Random Forest. Jadi, semakin besar nilai n_estimators, semakin banyak pohon keputusan yang digunakan dalam metode ini."""

# Model random forest Regressor dengan GAUSSIAN CLASSIFIER n estimator 100

clf1 = RandomForestRegressor(n_estimators=100)

"""#  Pelatihan Model"""

# Model Random Forest Classifier

RFC = clf.fit(X_train, y_train)
RFC

# Model Random Forest Regressor

RFR = clf1.fit(X_train, y_train)
RFR

"""# Evaluasi Model

# a.Model Logistic Regression
"""

# Memeriksa performa dengan .prdict_proba() yang mengembalikan matriks probabilitas bahwa keluaran yang diprediksi sama dengan nol / satu

RFC.predict_proba(X_test)

# Melihat predicted outputs dengan .predict()

y_pred = RFC.predict(X_test)
y_pred

# Melihat nilai akurasi dengan .score

print("Test score:", RFC.score(X_test, y_test))
print("Train score:", RFC.score(X_train, y_train))

"""Test score: 0.9166666666666666: Ini menunjukkan bahwa model memiliki akurasi sekitar 91.67% pada data uji. Artinya, dari total data uji, sekitar 91.67% di klasifikasikan dengan benar oleh model.

Train score: 1.0: Skor pelatihan sebesar 1.0 menunjukkan bahwa model mencapai akurasi sempurna (100%) pada data pelatihan. Ini bisa mengindikasikan adanya potensi overfitting, di mana model mungkin terlalu "mengingat" data pelatihan dan kurang dapat umum pada data baru.


"""

# Melihat confussion matrix dan classification report dari model

confusion_matrix(y_test, y_pred)

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", linewidths=.5, cmap = 'nipy_spectral_r')
plt.show()
print(classification_report(y_test, y_pred))

"""Berdasarkan matriks konfusi, terungkap bahwa terdapat 40 nilai True Positive (TP), 2 nilai False Positive (FP), 3 nilai False Negative (FN), dan 15 nilai True Negative (TN)."""

# Melihat summary dari evaluasi model Logistic Regression

print('Ringkasan Evaluasi Model Random Forest Classifier')
print('Akurasi :', accuracy_score(y_test, y_pred))
print('Presisi :', precision_score(y_test,y_pred))
print('Recall :', recall_score(y_test,y_pred))
print('F1 Score :', f1_score(y_test,y_pred))

"""Berdasarkan evaluasi model, diketahui bahwa akurasi dari model random forest classifier mencapai 92% (0.916). Hal ini menunjukkan bahwa hasilnya cukup baik dan dapat dianggap akurat. Oleh karena itu, model ini dapat digunakan untuk melakukan prediksi terkait keselamatan pasien dari penyakit jantung.

# b. Model Random Forest Regressor
"""

# Melihat predicted outputs dengan .predict()

y_pred_reg = RFR.predict(X_test)
y_pred_reg

# Melihat nilai akurasi dengan .score

print("Test score:", RFR.score(X_test, y_test))
print("Train score:", RFR.score(X_train, y_train))

"""Diperoleh skor uji sebesar 54% (0.54), sedangkan jika dibandingkan dengan skor pelatihan yang mencapai 92% (0.915)."""

# Melihat confussion matrix dan classification report dari model

y_pred_reg_round = y_pred_reg.round()
confusion_matrix(y_test, y_pred_reg_round)

cm_reg = confusion_matrix(y_test, y_pred_reg_round)
sns.heatmap(cm_reg, annot=True, fmt="d", linewidths=.5, cmap = 'spring')
plt.show()
print(classification_report(y_test, y_pred_reg_round))

"""Berdasarkan matriks konfusi, terdapat 38 nilai True Positive (TP), 4 nilai False Positive (FP), 3 nilai False Negative (FN), dan 15 nilai True Negative (TN)."""

# Melihat summary dari evaluasi model Logistic Regression

print('Ringkasan Evaluasi Model Random Forest Regressor')
print('Akurasi :', accuracy_score(y_test, y_pred_reg_round))
print('Presisi :', precision_score(y_test,y_pred_reg_round))
print('Recall :', recall_score(y_test,y_pred_reg_round))
print('F1 Score :', f1_score(y_test,y_pred_reg_round))

"""Dari evaluasi model, terungkap bahwa akurasi dari model random forest regressor mencapai 88% (0.88). Hal ini menunjukkan bahwa hasilnya cukup baik dan dapat dianggap akurat. Oleh karena itu, model ini dapat digunakan untuk melakukan prediksi terkait keselamatan pasien dari penyakit jantung.

**Kesimpulan**

Akurasi hasil dari penggunaan dua metode ensemble, yaitu Random Forest Classifier dengan akurasi 92% dan Random Forest Regressor dengan akurasi 88%, keduanya tergolong baik dan dapat digunakan untuk memprediksi keselamatan pasien dari penyakit jantung. Oleh karena itu, pada langkah selanjutnya, kami akan menggunakan kedua model tersebut, dan output prediksi akan mencakup hasil dari kedua model.

# Model Inference

Petunjuk Pengisian:

- Harap masukkan nilai Usia (float) dalam rentang 40 tahun hingga 95 tahun dengan format tahun.bulan.
- Untuk kolom Trombosit dan Kreatinin Serum, masukkan nilai sesuai dengan data yang akan diprediksi, dengan tipe data float.
"""

print('--- PREDIKSI KESELAMATAN PASIEN DARI PENYAKIT JANTUNG MENGGUNAKAN RANDOM FOREST ---')
print('='*100)

usia = float(input("Usia (Range 40.0 - 95.0) (format: tahun.bulan) : "))
anaemia = input("Apakah pasien mempunyai anemia? (Yes/No): : ")
enzim = int(input("Level Creatinine Phosphokinase : "))
diabetes = input("Apakah pasien mempunyai riwayat diabetes? (Yes/No) : ")
ejeksi = int(input("Banyak Darah Keluar Jantung (Pecahan Ejeksi) : "))
DarahTinggi = input("Apakah pasien mempunyai darah tinggi? (Yes/No): : ")
trombosit = float(input("Jumlah platelet (trombosit) pasien : "))
kreatinin = float(input("Level serum creatinine dalam darah : "))
sodium = int(input("Level serum sodium dalam darah : "))
JenisKelamin= input("Jenis Kelamin (Male/Female): ")
rokok = input("Apakah pasien merokok? (Yes/No) : ")
waktu = int(input("Hari sebelum follow-up berikutnya: : "))

val = [usia, enzim , ejeksi, trombosit, kreatinin, sodium, waktu]

anae = {'No':0, 'Yes': 1}

for i in range(0,2):
    if anae[anaemia]==i:
        val.append(1.0)
    else:
        next

diabet = {'No':0, 'Yes': 1}

for i in range(0,2):
    if diabet[diabetes]==i:
        val.append(1.0)
    else:
        next

darah = {'No':0, 'Yes': 1}

for i in range(0,2):
    if darah[DarahTinggi]==i:
        val.append(1.0)
    else:
        next

kelamin = {'Female':0, 'Male': 1}

for i in range(0,2):
    if kelamin[JenisKelamin]==i:
        val.append(1.0)
    else:
        next

smoke = {'No':0, 'Yes': 1}

for i in range(0,2):
    if smoke[rokok]==i:
        val.append(1.0)
    else:
        next

print(val)

predict_rfc = RFC.predict([val])
predict_reg = RFR.predict([val])

if (predict_rfc == 0):
    print("Berdasarkan prediksi Random Forest Classifier yaitu pasien belum meninggal sebelum follow up berikutnya")
else:
    print("Berdasarkan prediksi Random Forest Classifier pasien telah meninggal sebelum follow up berikutnya.")

if (predict_reg == 0):
    print("Berdasarkan prediksi Random Forest Regressor yaitu pasien belum meninggal sebelum follow up berikutnya")
else:
    print("Berdasarkan prediksi Random Forest Regressor yaitu pasien telah meninggal sebelum follow up berikutnya.")

"""- Berdasarkan Random Forest Classifier, pasien diprediksi meninggal sebelum follow-up berikutnya.

- Berdasarkan Random Forest Regressor, pasien juga diprediksi meninggal sebelum follow-up berikutnya.

# 11. Pengambilan Keputusan
Dari analisis yang telah kami lakukan, diperoleh kesimpulan sebagai berikut:
- Pada Dataset terdapat 13 atribut yang diperkirakan sebagai faktor yang memprediksi keselamatan pasien dari penyakit jantung, Namun setelah dilakukan analisis kami menyimpulkan bahwa semua atribut  menjadi faktor kuat yang memprediksi keselamatan pasien dari penyakit jantung dengan atribut `Kematian` sebagai target dan atribut `Waktu`, `KreatininSerum`, `PecahanEjeksi`, `Usia`, `SodiumSerum`, `TekananDarahTinggi`, `Anaemia `, `EnzimCPK`, `Trombosit`, `Merokok`, `JenisKelamin`, dan `Diabetes` sebagai faktor yang memprediksi keselamatan pasien dari penyakit jantung
- Pada datset ini tidak terdapat adanya misssing value pada setiap atributnya
- Pada analisis ini kami juga membuat beberapa visualisasi menggunakan lineplot, boxplot, histogram, pie chart, dan matriks korelasi (heatmap) dan juga kamimelakukan beberapa contoh groupby dan query terhadap data yang ada
- Pada analisis ini variabel dependen atau target yang digunakan yaitu `Kematian` dan variabel independen yang digunakan yaitu `Waktu`, `KreatininSerum`, `PecahanEjeksi`, `Usia`, `SodiumSerum`, `TekananDarahTinggi`, `Anaemia `, `EnzimCPK`, `Trombosit`, `Merokok`, `JenisKelamin`, dan `Diabetes`
- Pada proses feature selection kami menggunakan library F regression yang memberikan score pada setiap atribut
- Pada analisis ini kami membagi data menjadi Training dan Testing dengan proporsi Training data sebesar 80% (0.80) dan Testing data sebesar 20% (0.20)
- Pada project ini kami menggunakan model ensemble method yaitu Random Forest Classifier dan Random Forest Regressor
- Untuk model Random Forest Classifier didapatkan nilai Akurasi sebesar 92% (0.916), nilai Presisi sebesar 88% (0.88), nilai Recall sebesar 83% (0.83), dan nilai F1 Score sebesar 86% (0.857)
- Untuk model Random Forest Regressor didapatkan nilai Akurasi sebesar 88% (0.88), nilai Presisi sebesar 79% (0.789), nilai Recall sebesar 83% (0.83), dan nilai F1 Score sebesar 81% (0.81)
- Hasil akurasi dengan menggunakan 2 model ensemble method diantaranya Random Forest Classifier dengan nilai akurasi 92% dan Random Forest Regressor dengan nilai akurasi 88% sama-sama baik dan bisa digunakan untuk dilakukan prediksi keselamatan pasien dari penyakit jantung.
- Pada tahap selanjutnya kami akan menggunakan kedua model tersebut dan pada hasil prediksi akan diberikan output hasil prediksi dengan 2 model tersebut
"""